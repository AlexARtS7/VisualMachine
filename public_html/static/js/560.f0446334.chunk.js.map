{"version":3,"file":"static/js/560.f0446334.chunk.js","mappings":"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","sources":["../node_modules/fscreen/src/fscreen.js","../node_modules/react-full-screen/src/index.tsx","components/appFullScreen/FullScreen.js","components/pages/FSPage.js","store/actions/actions.js"],"sourcesContent":["const key = {\n  fullscreenEnabled: 0,\n  fullscreenElement: 1,\n  requestFullscreen: 2,\n  exitFullscreen: 3,\n  fullscreenchange: 4,\n  fullscreenerror: 5,\n  fullscreen: 6\n};\n\nconst webkit = [\n  'webkitFullscreenEnabled',\n  'webkitFullscreenElement',\n  'webkitRequestFullscreen',\n  'webkitExitFullscreen',\n  'webkitfullscreenchange',\n  'webkitfullscreenerror',\n  '-webkit-full-screen',\n];\n\nconst moz = [\n  'mozFullScreenEnabled',\n  'mozFullScreenElement',\n  'mozRequestFullScreen',\n  'mozCancelFullScreen',\n  'mozfullscreenchange',\n  'mozfullscreenerror',\n  '-moz-full-screen',\n];\n\nconst ms = [\n  'msFullscreenEnabled',\n  'msFullscreenElement',\n  'msRequestFullscreen',\n  'msExitFullscreen',\n  'MSFullscreenChange',\n  'MSFullscreenError',\n  '-ms-fullscreen',\n];\n\n// so it doesn't throw if no window or document\nconst document = typeof window !== 'undefined' && typeof window.document !== 'undefined' ? window.document : {};\n\nconst vendor = (\n  ('fullscreenEnabled' in document && Object.keys(key)) ||\n  (webkit[0] in document && webkit) ||\n  (moz[0] in document && moz) ||\n  (ms[0] in document && ms) ||\n  []\n);\n\nexport default {\n  requestFullscreen: element => element[vendor[key.requestFullscreen]](),\n  requestFullscreenFunction: element => element[vendor[key.requestFullscreen]],\n  get exitFullscreen() { return document[vendor[key.exitFullscreen]].bind(document); },\n  get fullscreenPseudoClass() { return `:${vendor[key.fullscreen]}`; },\n  addEventListener: (type, handler, options) => document.addEventListener(vendor[key[type]], handler, options),\n  removeEventListener: (type, handler, options) => document.removeEventListener(vendor[key[type]], handler, options),\n  get fullscreenEnabled() { return Boolean(document[vendor[key.fullscreenEnabled]]); },\n  set fullscreenEnabled(val) {},\n  get fullscreenElement() { return document[vendor[key.fullscreenElement]]; },\n  set fullscreenElement(val) {},\n  get onfullscreenchange() { return document[`on${vendor[key.fullscreenchange]}`.toLowerCase()]; },\n  set onfullscreenchange(handler) { return document[`on${vendor[key.fullscreenchange]}`.toLowerCase()] = handler; },\n  get onfullscreenerror() { return document[`on${vendor[key.fullscreenerror]}`.toLowerCase()]; },\n  set onfullscreenerror(handler) { return document[`on${vendor[key.fullscreenerror]}`.toLowerCase()] = handler; },\n};\n","import React, {\n  useCallback,\n  useState,\n  useRef,\n  useEffect,\n  useMemo,\n} from 'react';\nimport fscreen from 'fscreen';\n\nexport interface FullScreenHandle {\n  active: boolean;\n  enter: () => Promise<void>;\n  exit: () => Promise<void>;\n  node: React.MutableRefObject<HTMLDivElement | null>;\n}\n\nexport interface FullScreenProps {\n  handle: FullScreenHandle;\n  onChange?: (state: boolean, handle: FullScreenHandle) => void;\n  className?: string;\n}\n\nexport function useFullScreenHandle(): FullScreenHandle {\n  const [active, setActive] = useState<boolean>(false);\n  const node = useRef<HTMLDivElement | null>(null);\n\n  useEffect(() => {\n    const handleChange = () => {\n      setActive(fscreen.fullscreenElement === node.current);\n    };\n    fscreen.addEventListener('fullscreenchange', handleChange);\n    return () => fscreen.removeEventListener('fullscreenchange', handleChange);\n  }, []);\n\n  const enter = useCallback(() => {\n    if (fscreen.fullscreenElement) {\n      return fscreen.exitFullscreen().then(() => {\n        return fscreen.requestFullscreen(node.current);\n      });\n    } else if (node.current) {\n      return fscreen.requestFullscreen(node.current);\n    }\n  }, []);\n\n  const exit = useCallback(() => {\n    if (fscreen.fullscreenElement === node.current) {\n      return fscreen.exitFullscreen();\n    }\n    return Promise.resolve();\n  }, []);\n\n  return useMemo(\n    () => ({\n      active,\n      enter,\n      exit,\n      node,\n    }),\n    [active, enter, exit],\n  );\n}\n\nexport const FullScreen: React.FC<FullScreenProps> = ({\n  handle,\n  onChange,\n  children,\n  className,\n}) => {\n  const classNames = [];\n  if (className) {\n    classNames.push(className);\n  }\n\n  classNames.push('fullscreen');\n\n  if (handle.active) {\n    classNames.push('fullscreen-enabled');\n  }\n\n  useEffect(() => {\n    if (onChange) {\n      onChange(handle.active, handle);\n    }\n  }, [handle.active]);\n\n  return (\n    <div\n      className={classNames.join(' ')}\n      ref={handle.node}\n      style={handle.active ? { height: '100%', width: '100%' } : undefined}\n    >\n      {children}\n    </div>\n  );\n};\n","import React from 'react';\r\nimport { useSelector } from 'react-redux'\r\nimport { canvasReinit } from '../../services/appProcessor';\r\nimport { FullScreen, useFullScreenHandle } from \"react-full-screen\";\r\nimport Actions from '../../store/actions/actions';\r\n\r\nimport './fullScreen.scss';\r\n\r\nconst FullScreenRender = () => {\r\n    const { fullScreenMode } = Actions();\r\n    const {channels} = useSelector(state => state) \r\n    const visLab = useSelector(state => state.visLab)\r\n    const visBor = useSelector(state => state.visBor)\r\n    const hrefInit = useSelector(state => state.hrefInit)\r\n    const initHref = useSelector(state => state.initHref)\r\n\r\n    const handle = useFullScreenHandle();\r\n\r\n    // const startFullscreen = () => {\r\n    //     handle.enter\r\n    // }\r\n    \r\n\r\n    const elements = channels.map((item, i) => {\r\n        if(hrefInit === !initHref) return null;\r\n        const viewId = `view${i}`\r\n        return (\r\n            <div key={i} className='fullscreen__item'>\r\n                {visLab ? <div className='app__navtext'>КАНАЛ: {item.mark}</div> : null}\r\n                <div className={visBor ? 'app__bkg' : ''}>\r\n                    <div className='fullscreen__view' \r\n                    id={viewId}></div>\r\n                </div>\r\n            </div>    \r\n        )\r\n    });\r\n\r\n    const changefullScreenMode = () => {\r\n        fullScreenMode(0)\r\n        canvasReinit()\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <button \r\n                className='fullscreen__button' \r\n                onClick={handle.enter}>\r\n                НА ВЕСЬ ЭКРАН</button>\r\n        <FullScreen handle={handle}>\r\n            <div className='fullscreen'>\r\n                <button \r\n                    className='fullscreen__button' \r\n                    onClick={() => changefullScreenMode()}>\r\n                    ВЕРНУТЬСЯ К НАСТРОЙКАМ\r\n                </button>\r\n                <div className='app__flex__center'>\r\n                    {elements}\r\n                </div>                \r\n            </div>\r\n        </FullScreen>\r\n        </div>        \r\n    )\r\n}\r\n\r\nexport default FullScreenRender;","import React from \"react\";\r\nimport FullScreenRender from \"../appFullScreen/FullScreen\";\r\n\r\nconst FSPage = () => {\r\n    return (\r\n        <>\r\n            <FullScreenRender/>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default FSPage;","import { useDispatch, useSelector } from \"react-redux\";\r\nimport { useEffect } from \"react\";\r\nimport { initMarkers } from '../../services/appDisplayDrawingProcessor';\r\nimport { initState } from \"../../services/appProcessor\";\r\nimport { hrefInition } from \"../../services/appDisplayDrawingProcessor\";\r\n\r\nconst Actions = () => {\r\n    const dispatch = useDispatch();\r\n    const channels = useSelector(state => state.channels)\r\n    const fullScreen = useSelector(state => state.fullScreen)\r\n\r\n    const changeFillStatus = (e) => {        \r\n        localStorage.setItem('fillStatus', e.value)\r\n        dispatch({type: 'CHANGE_FILL_STATUS', fill: e.value});\r\n    }\r\n\r\n    const changeMaxChannel = (e, i) => {\r\n        const tempArr = channels;\r\n        tempArr[i].max = +e.value\r\n\r\n        dispatch({type: 'CHANGE_CHANNEL_ARRAY', tempArr: tempArr })\r\n\r\n        if(e.value < channels[i].min){\r\n            changeMinChannel(e, i);\r\n        }\r\n        initMarkers(); \r\n    }\r\n\r\n    const changeMinChannel = (e, i) => {         \r\n        const tempArr = channels;\r\n        tempArr[i].min = +e.value\r\n\r\n        dispatch({type: 'CHANGE_CHANNEL_ARRAY', tempArr: tempArr })\r\n\r\n        if(e.value > channels[i].max){\r\n            changeMaxChannel(e, i);\r\n        }\r\n        initMarkers();\r\n    }\r\n\r\n    const changeVisMode = (e) => {        \r\n        localStorage.setItem('rate', e.value)\r\n        dispatch({type: 'CHANGE_VISMODE', rate: e.value})\r\n    }\r\n\r\n    const changeSuppression = (e) => {        \r\n        localStorage.setItem('suppression', e.value)\r\n        dispatch({type: 'CHANGE_SUPPRESSION', suppression: e.value})\r\n    }\r\n\r\n    const changeColor = (e) => {    \r\n        // const res = JSON.stringify(e).replace(/[{rgb:\"}]/g, '') \r\n        localStorage.setItem('renderColor', e)\r\n        dispatch({type: 'CHANGE_COLOR', color: e})\r\n    }\r\n\r\n    const changePeaksStatus = (e) => {        \r\n        localStorage.setItem('peaksStatus', e.value)\r\n        dispatch({type: 'CHANGE_PEAKS_STATUS', peaks: e.value})\r\n    }\r\n\r\n    const changeSampleColor = (color, i) => {\r\n        const tempArr = channels;\r\n        tempArr[i].color = color\r\n\r\n        dispatch({type: 'CHANGE_CHANNEL_ARRAY', tempArr: tempArr })\r\n        initMarkers();\r\n    }\r\n\r\n    const assembleChange = (e, i) => {\r\n        const tempArr = channels;\r\n        tempArr[i].assemble = e.value\r\n\r\n        dispatch({type: 'CHANGE_CHANNEL_ARRAY', tempArr: tempArr })        \r\n    }\r\n\r\n    const rearChange = (e, i) => {\r\n        const tempArr = channels;\r\n        tempArr[i].rear = +e.value\r\n\r\n        dispatch({type: 'CHANGE_CHANNEL_ARRAY', tempArr: tempArr })\r\n    }\r\n\r\n    const frontChange = (e, i) => {\r\n        const tempArr = channels;\r\n        tempArr[i].front = +e.value\r\n\r\n        dispatch({type: 'CHANGE_CHANNEL_ARRAY', tempArr: tempArr })\r\n    }\r\n\r\n    const reactionChange = (e, i) => {\r\n        const tempArr = channels;\r\n        tempArr[i].reaction = +e.value\r\n\r\n        dispatch({type: 'CHANGE_CHANNEL_ARRAY', tempArr: tempArr })\r\n    }\r\n\r\n    const changeLightUp = (e) => {   \r\n        localStorage.setItem('opacityUp', e.value/1000)\r\n        dispatch({type: 'CHANGE_LIGHT_UP', value: e.value})\r\n        initState();\r\n    }\r\n\r\n    const changeLightDown = (e) => {        \r\n        localStorage.setItem('opacityDown', e.value/1000)\r\n        dispatch({type: 'CHANGE_LIGHT_DOWN', value: e.value})\r\n        initState();\r\n    }\r\n\r\n    const changeLightMax = (e) => {        \r\n        localStorage.setItem('opacityMax', e.value/100)\r\n        dispatch({type: 'CHANGE_LIGHT_MAX', value: e.value})\r\n        initState();\r\n    }\r\n\r\n    const changeVis = (e) => {        \r\n        localStorage.setItem('visSet', e.value)\r\n        dispatch({type: 'CHANGE_VISUAL_SETTINGS', value: e.value})\r\n        initState();\r\n    }\r\n\r\n    const visBorChange = (e) => {        \r\n        localStorage.setItem('visBor', e.checked)\r\n        dispatch({type: 'CHANGE_BORDER_STATUS', value: e.checked})\r\n    }\r\n\r\n    const visLabChange = (e) => {   \r\n        localStorage.setItem('visLab', e.checked)     \r\n        dispatch({type: 'CHANGE_LABELS_STATUS', value: e.checked})\r\n    }\r\n\r\n    const fullScreenMode = (value) => {\r\n        dispatch({type: 'CHANGE_FULLSCREEN_MODE', value: value})\r\n    }\r\n\r\n    const onChangeRate = (e) => {\r\n        changeVisMode(e)\r\n        channels.forEach((item, i) => {\r\n            if(item.max > +e.value) {\r\n                changeMaxChannel(e, i)\r\n            }\r\n            if(item.min > +e.value) {\r\n                changeMinChannel(e, i)\r\n            }\r\n        });\r\n    }\r\n\r\n    const addChannels = () => {\r\n        const abc = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.split('');\r\n        let res = abc.find(i => !channels.map(item => item.mark).includes(i))\r\n        if(channels.length < 10){\r\n            const tempArr = channels;\r\n            tempArr.push (\r\n                {mark: res, min: 0, max: 0, \r\n                color: '#ffffff', \r\n                assemble: 'maximum', rear: 28, \r\n                front: 10, reaction: 2})\r\n         \r\n        tempArr.sort((a, b) => {\r\n            if(a.mark < b.mark) return -1;\r\n            if(a.mark > b.mark) return 1;\r\n            })\r\n\r\n            dispatch({type: 'CHANGE_CHANNEL_ARRAY', tempArr: tempArr })\r\n            initMarkers();\r\n        }\r\n    }\r\n    \r\n    const deleteChannel = (i) => {\r\n        const tempArr = channels;\r\n        tempArr.splice(+i, 1);   \r\n\r\n        dispatch({type: 'CHANGE_CHANNEL_ARRAY', tempArr: tempArr })\r\n        initMarkers();\r\n    }\r\n\r\n    useEffect(() => {\r\n        dispatch({type: 'CHANGE_HREFINIT', hrefInit: hrefInition(), initHref: window.location.href })\r\n    }, [fullScreen])\r\n    \r\n    //localstorage\r\n    localStorage.setItem('channels', JSON.stringify(channels))\r\n\r\n    return {changeFillStatus, \r\n            addChannels,\r\n            onChangeRate, \r\n            changeColor, \r\n            changePeaksStatus, \r\n            changeSampleColor,\r\n            assembleChange,\r\n            rearChange,\r\n            frontChange,\r\n            reactionChange,\r\n            deleteChannel,\r\n            changeMinChannel,\r\n            changeMaxChannel,\r\n            changeLightUp,\r\n            changeLightDown,\r\n            changeVis,\r\n            changeSuppression,\r\n            visBorChange,\r\n            visLabChange,\r\n            changeLightMax,\r\n            fullScreenMode}\r\n}\r\n\r\nexport default Actions;"],"names":["key","fullscreenEnabled","fullscreenElement","requestFullscreen","exitFullscreen","fullscreenchange","fullscreenerror","fullscreen","webkit","moz","ms","document","window","vendor","Object","keys","element","requestFullscreenFunction","bind","fullscreenPseudoClass","addEventListener","type","handler","options","removeEventListener","Boolean","val","onfullscreenchange","toLowerCase","onfullscreenerror","FullScreen","handle","onChange","children","className","classNames","push","active","useEffect","React","join","ref","node","style","height","width","undefined","fullScreenMode","Actions","channels","useSelector","state","visLab","visBor","hrefInit","initHref","useState","setActive","useRef","handleChange","fscreen","current","enter","useCallback","then","exit","Promise","resolve","useMemo","useFullScreenHandle","elements","map","item","i","viewId","mark","id","onClick","canvasReinit","dispatch","useDispatch","fullScreen","changeMaxChannel","e","tempArr","max","value","min","changeMinChannel","initMarkers","hrefInition","location","href","localStorage","setItem","JSON","stringify","changeFillStatus","fill","addChannels","res","split","find","includes","length","color","assemble","rear","front","reaction","sort","a","b","onChangeRate","rate","changeVisMode","forEach","changeColor","changePeaksStatus","peaks","changeSampleColor","assembleChange","rearChange","frontChange","reactionChange","deleteChannel","splice","changeLightUp","initState","changeLightDown","changeVis","changeSuppression","suppression","visBorChange","checked","visLabChange","changeLightMax"],"sourceRoot":""}