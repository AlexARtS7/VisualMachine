{"version":3,"file":"static/js/560.28d4f494.chunk.js","mappings":"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","sources":["../node_modules/fscreen/src/fscreen.js","../node_modules/react-full-screen/src/index.tsx","components/appFullScreen/FullScreen.js","components/pages/FSPage.js","store/actions/actions.js"],"sourcesContent":["const key = {\n  fullscreenEnabled: 0,\n  fullscreenElement: 1,\n  requestFullscreen: 2,\n  exitFullscreen: 3,\n  fullscreenchange: 4,\n  fullscreenerror: 5,\n  fullscreen: 6\n};\n\nconst webkit = [\n  'webkitFullscreenEnabled',\n  'webkitFullscreenElement',\n  'webkitRequestFullscreen',\n  'webkitExitFullscreen',\n  'webkitfullscreenchange',\n  'webkitfullscreenerror',\n  '-webkit-full-screen',\n];\n\nconst moz = [\n  'mozFullScreenEnabled',\n  'mozFullScreenElement',\n  'mozRequestFullScreen',\n  'mozCancelFullScreen',\n  'mozfullscreenchange',\n  'mozfullscreenerror',\n  '-moz-full-screen',\n];\n\nconst ms = [\n  'msFullscreenEnabled',\n  'msFullscreenElement',\n  'msRequestFullscreen',\n  'msExitFullscreen',\n  'MSFullscreenChange',\n  'MSFullscreenError',\n  '-ms-fullscreen',\n];\n\n// so it doesn't throw if no window or document\nconst document = typeof window !== 'undefined' && typeof window.document !== 'undefined' ? window.document : {};\n\nconst vendor = (\n  ('fullscreenEnabled' in document && Object.keys(key)) ||\n  (webkit[0] in document && webkit) ||\n  (moz[0] in document && moz) ||\n  (ms[0] in document && ms) ||\n  []\n);\n\nexport default {\n  requestFullscreen: element => element[vendor[key.requestFullscreen]](),\n  requestFullscreenFunction: element => element[vendor[key.requestFullscreen]],\n  get exitFullscreen() { return document[vendor[key.exitFullscreen]].bind(document); },\n  get fullscreenPseudoClass() { return `:${vendor[key.fullscreen]}`; },\n  addEventListener: (type, handler, options) => document.addEventListener(vendor[key[type]], handler, options),\n  removeEventListener: (type, handler, options) => document.removeEventListener(vendor[key[type]], handler, options),\n  get fullscreenEnabled() { return Boolean(document[vendor[key.fullscreenEnabled]]); },\n  set fullscreenEnabled(val) {},\n  get fullscreenElement() { return document[vendor[key.fullscreenElement]]; },\n  set fullscreenElement(val) {},\n  get onfullscreenchange() { return document[`on${vendor[key.fullscreenchange]}`.toLowerCase()]; },\n  set onfullscreenchange(handler) { return document[`on${vendor[key.fullscreenchange]}`.toLowerCase()] = handler; },\n  get onfullscreenerror() { return document[`on${vendor[key.fullscreenerror]}`.toLowerCase()]; },\n  set onfullscreenerror(handler) { return document[`on${vendor[key.fullscreenerror]}`.toLowerCase()] = handler; },\n};\n","import React, {\n  useCallback,\n  useState,\n  useRef,\n  useEffect,\n  useMemo,\n} from 'react';\nimport fscreen from 'fscreen';\n\nexport interface FullScreenHandle {\n  active: boolean;\n  enter: () => Promise<void>;\n  exit: () => Promise<void>;\n  node: React.MutableRefObject<HTMLDivElement | null>;\n}\n\nexport interface FullScreenProps {\n  handle: FullScreenHandle;\n  onChange?: (state: boolean, handle: FullScreenHandle) => void;\n  className?: string;\n}\n\nexport function useFullScreenHandle(): FullScreenHandle {\n  const [active, setActive] = useState<boolean>(false);\n  const node = useRef<HTMLDivElement | null>(null);\n\n  useEffect(() => {\n    const handleChange = () => {\n      setActive(fscreen.fullscreenElement === node.current);\n    };\n    fscreen.addEventListener('fullscreenchange', handleChange);\n    return () => fscreen.removeEventListener('fullscreenchange', handleChange);\n  }, []);\n\n  const enter = useCallback(() => {\n    if (fscreen.fullscreenElement) {\n      return fscreen.exitFullscreen().then(() => {\n        return fscreen.requestFullscreen(node.current);\n      });\n    } else if (node.current) {\n      return fscreen.requestFullscreen(node.current);\n    }\n  }, []);\n\n  const exit = useCallback(() => {\n    if (fscreen.fullscreenElement === node.current) {\n      return fscreen.exitFullscreen();\n    }\n    return Promise.resolve();\n  }, []);\n\n  return useMemo(\n    () => ({\n      active,\n      enter,\n      exit,\n      node,\n    }),\n    [active, enter, exit],\n  );\n}\n\nexport const FullScreen: React.FC<FullScreenProps> = ({\n  handle,\n  onChange,\n  children,\n  className,\n}) => {\n  const classNames = [];\n  if (className) {\n    classNames.push(className);\n  }\n\n  classNames.push('fullscreen');\n\n  if (handle.active) {\n    classNames.push('fullscreen-enabled');\n  }\n\n  useEffect(() => {\n    if (onChange) {\n      onChange(handle.active, handle);\n    }\n  }, [handle.active]);\n\n  return (\n    <div\n      className={classNames.join(' ')}\n      ref={handle.node}\n      style={handle.active ? { height: '100%', width: '100%' } : undefined}\n    >\n      {children}\n    </div>\n  );\n};\n","import { useSelector } from 'react-redux'\r\nimport { canvasReinit } from '../../services/appProcessor';\r\nimport { FullScreen, useFullScreenHandle } from \"react-full-screen\";\r\nimport Actions from '../../store/actions/actions';\r\n\r\nimport './fullScreen.scss';\r\n\r\nconst FullScreenRender = () => {\r\n    const { fullScreenMode } = Actions();\r\n    const {channels} = useSelector(state => state) \r\n    const visLab = useSelector(state => state.visLab)\r\n    const visBor = useSelector(state => state.visBor)\r\n    const hrefInit = useSelector(state => state.hrefInit)\r\n    const initHref = useSelector(state => state.initHref)\r\n\r\n    const handle = useFullScreenHandle();\r\n\r\n    // const startFullscreen = () => {\r\n    //     handle.enter\r\n    // }\r\n    \r\n\r\n    const elements = channels.map((item, i) => {\r\n        if(hrefInit === !initHref) return null;\r\n        const viewId = `view${i}`\r\n        return (\r\n            <div key={i} className='fullscreen__item'>\r\n                {visLab ? <div className='app__navtext'>КАНАЛ: {item.mark}</div> : null}\r\n                <div className={visBor ? 'app__bkg fullscreen__view' : 'fullscreen__view'} id={viewId}></div>\r\n            </div>    \r\n        )\r\n    });\r\n\r\n    const changefullScreenMode = () => {\r\n        fullScreenMode(0)\r\n        canvasReinit()\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <button \r\n                className='fullscreen__button' \r\n                onClick={handle.enter}>\r\n                НА ВЕСЬ ЭКРАН</button>\r\n        <FullScreen handle={handle}>\r\n            <div className='fullscreen'>\r\n                <button \r\n                    className='fullscreen__button' \r\n                    onClick={() => changefullScreenMode()}>\r\n                    ВЕРНУТЬСЯ К НАСТРОЙКАМ\r\n                </button>\r\n                <div className='app__flex__center'>\r\n                    {elements}\r\n                </div>                \r\n            </div>\r\n        </FullScreen>\r\n        </div>        \r\n    )\r\n}\r\n\r\nexport default FullScreenRender;","import FullScreenRender from \"../appFullScreen/FullScreen\";\r\n\r\nconst FSPage = () => {\r\n    return (\r\n        <>\r\n            <FullScreenRender/>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default FSPage;","import { useDispatch, useSelector } from \"react-redux\";\r\nimport { useEffect } from \"react\";\r\nimport { initMarkers } from '../../services/appDisplayDrawingProcessor';\r\nimport { initState } from \"../../services/appProcessor\";\r\nimport { hrefInition } from \"../../services/appDisplayDrawingProcessor\";\r\n\r\nconst Actions = () => {\r\n    const dispatch = useDispatch();\r\n    const channels = useSelector(state => state.channels)\r\n    const fullScreen = useSelector(state => state.fullScreen)\r\n\r\n    const changeFillStatus = (e) => {        \r\n        localStorage.setItem('fillStatus', e.value)\r\n        dispatch({type: 'CHANGE_FILL_STATUS', fill: e.value});\r\n    }\r\n\r\n    const changeMaxChannel = (e, i) => {\r\n        const tempArr = channels;\r\n        tempArr[i].max = +e.value\r\n\r\n        dispatch({type: 'CHANGE_CHANNEL_ARRAY', tempArr: tempArr })\r\n\r\n        if(e.value < channels[i].min){\r\n            changeMinChannel(e, i);\r\n        }\r\n        initMarkers(); \r\n    }\r\n\r\n    const changeMinChannel = (e, i) => {         \r\n        const tempArr = channels;\r\n        tempArr[i].min = +e.value\r\n\r\n        dispatch({type: 'CHANGE_CHANNEL_ARRAY', tempArr: tempArr })\r\n\r\n        if(e.value > channels[i].max){\r\n            changeMaxChannel(e, i);\r\n        }\r\n        initMarkers();\r\n    }\r\n\r\n    const changeVisMode = (e) => {        \r\n        localStorage.setItem('rate', e.value)\r\n        dispatch({type: 'CHANGE_VISMODE', rate: e.value})\r\n    }\r\n\r\n    const changeColor = (e) => {        \r\n        localStorage.setItem('renderColor', e.value)\r\n        dispatch({type: 'CHANGE_COLOR', color: e.value})\r\n    }\r\n\r\n    const changePeaksStatus = (e) => {        \r\n        localStorage.setItem('peaksStatus', e.value)\r\n        dispatch({type: 'CHANGE_PEAKS_STATUS', peaks: e.value})\r\n    }\r\n\r\n    const changeSampleColor = (e, i) => {\r\n        const tempArr = channels;\r\n        tempArr[i].color = e.value\r\n\r\n        dispatch({type: 'CHANGE_CHANNEL_ARRAY', tempArr: tempArr })\r\n        initMarkers();\r\n    }\r\n\r\n    const assembleChange = (e, i) => {\r\n        const tempArr = channels;\r\n        tempArr[i].assemble = e.value\r\n\r\n        dispatch({type: 'CHANGE_CHANNEL_ARRAY', tempArr: tempArr })        \r\n    }\r\n\r\n    const rearChange = (e, i) => {\r\n        const tempArr = channels;\r\n        tempArr[i].rear = +e.value\r\n\r\n        dispatch({type: 'CHANGE_CHANNEL_ARRAY', tempArr: tempArr })\r\n    }\r\n\r\n    const frontChange = (e, i) => {\r\n        const tempArr = channels;\r\n        tempArr[i].front = +e.value\r\n\r\n        dispatch({type: 'CHANGE_CHANNEL_ARRAY', tempArr: tempArr })\r\n    }\r\n\r\n    const reactionChange = (e, i) => {\r\n        const tempArr = channels;\r\n        tempArr[i].reaction = +e.value\r\n\r\n        dispatch({type: 'CHANGE_CHANNEL_ARRAY', tempArr: tempArr })\r\n    }\r\n\r\n    const changeLightUp = (e) => {        \r\n        localStorage.setItem('opacityUp', e.value/1000)\r\n        dispatch({type: 'CHANGE_LIGHT_UP', value: e.value})\r\n        initState();\r\n    }\r\n\r\n    const changeLightDown = (e) => {        \r\n        localStorage.setItem('opacityDown', e.value/1000)\r\n        dispatch({type: 'CHANGE_LIGHT_DOWN', value: e.value})\r\n        initState();\r\n    }\r\n\r\n    const changeLightMax = (e) => {        \r\n        localStorage.setItem('opacityMax', e.value/100)\r\n        dispatch({type: 'CHANGE_LIGHT_MAX', value: e.value})\r\n        initState();\r\n    }\r\n\r\n    const changeVis = (e) => {        \r\n        localStorage.setItem('visSet', e.value)\r\n        dispatch({type: 'CHANGE_VISUAL_SETTINGS', value: e.value})\r\n        initState();\r\n    }\r\n\r\n    const visBorChange = (e) => {        \r\n        localStorage.setItem('visBor', e.checked)\r\n        dispatch({type: 'CHANGE_BORDER_STATUS', value: e.checked})\r\n    }\r\n\r\n    const visLabChange = (e) => {   \r\n        localStorage.setItem('visLab', e.checked)     \r\n        dispatch({type: 'CHANGE_LABELS_STATUS', value: e.checked})\r\n    }\r\n\r\n    const fullScreenMode = (value) => {\r\n        dispatch({type: 'CHANGE_FULLSCREEN_MODE', value: value})\r\n    }\r\n\r\n    const onChangeRate = (e) => {\r\n        changeVisMode(e)\r\n        channels.forEach((item, i) => {\r\n            if(item.max > +e.value) {\r\n                changeMaxChannel(e, i)\r\n            }\r\n            if(item.min > +e.value) {\r\n                changeMinChannel(e, i)\r\n            }\r\n        });\r\n    }\r\n\r\n    const addChannels = () => {\r\n        const abc = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.split('');\r\n        let res = abc.find(i => !channels.map(item => item.mark).includes(i))\r\n        if(channels.length < 10){\r\n            const tempArr = channels;\r\n            tempArr.push (\r\n                {mark: res, min: 0, max: 0, \r\n                color: '0,255,0', \r\n                assemble: 'maximum', rear: 28, \r\n                front: 10, reaction: 2})\r\n         \r\n        tempArr.sort((a, b) => {\r\n            if(a.mark < b.mark) return -1;\r\n            if(a.mark > b.mark) return 1;\r\n            })\r\n\r\n            dispatch({type: 'CHANGE_CHANNEL_ARRAY', tempArr: tempArr })\r\n            initMarkers();\r\n        }\r\n    }\r\n    \r\n    const deleteChannel = (i) => {\r\n        const tempArr = channels;\r\n        tempArr.splice(i, 1);   \r\n\r\n        dispatch({type: 'CHANGE_CHANNEL_ARRAY', tempArr: tempArr })\r\n        initMarkers();\r\n    }\r\n\r\n    useEffect(() => {\r\n        dispatch({type: 'CHANGE_HREFINIT', hrefInit: hrefInition(), initHref: window.location.href })\r\n    }, [fullScreen])\r\n    \r\n    //localstorage\r\n    localStorage.setItem('channels', JSON.stringify(channels))\r\n\r\n    return {changeFillStatus, \r\n            addChannels,\r\n            onChangeRate, \r\n            changeColor, \r\n            changePeaksStatus, \r\n            changeSampleColor,\r\n            assembleChange,\r\n            rearChange,\r\n            frontChange,\r\n            reactionChange,\r\n            deleteChannel,\r\n            changeMinChannel,\r\n            changeMaxChannel,\r\n            changeLightUp,\r\n            changeLightDown,\r\n            changeVis,\r\n            visBorChange,\r\n            visLabChange,\r\n            changeLightMax,\r\n            fullScreenMode}\r\n}\r\n\r\nexport default Actions;"],"names":["key","fullscreenEnabled","fullscreenElement","requestFullscreen","exitFullscreen","fullscreenchange","fullscreenerror","fullscreen","webkit","moz","ms","window","document","vendor","Object","keys","element","requestFullscreenFunction","bind","fullscreenPseudoClass","addEventListener","type","handler","options","removeEventListener","Boolean","val","onfullscreenchange","toLowerCase","onfullscreenerror","FullScreen","handle","onChange","children","className","classNames","useEffect","ref","node","style","height","width","undefined","fullScreenMode","Actions","channels","useSelector","state","visLab","visBor","hrefInit","initHref","useState","active","setActive","useRef","handleChange","fscreen","enter","useCallback","exit","Promise","useMemo","useFullScreenHandle","elements","map","item","i","viewId","mark","id","onClick","canvasReinit","dispatch","useDispatch","fullScreen","changeMaxChannel","e","tempArr","max","value","min","changeMinChannel","initMarkers","hrefInition","location","href","localStorage","setItem","JSON","stringify","changeFillStatus","fill","addChannels","res","split","find","includes","length","push","color","assemble","rear","front","reaction","sort","a","b","onChangeRate","rate","changeVisMode","forEach","changeColor","changePeaksStatus","peaks","changeSampleColor","assembleChange","rearChange","frontChange","reactionChange","deleteChannel","splice","changeLightUp","initState","changeLightDown","changeVis","visBorChange","checked","visLabChange","changeLightMax"],"sourceRoot":""}