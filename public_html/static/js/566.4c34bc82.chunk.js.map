{"version":3,"file":"static/js/566.4c34bc82.chunk.js","mappings":"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","sources":["components/appFullScreen/FullScreen.js","components/pages/FSPage.js","store/actions/actions.js"],"sourcesContent":["import { useSelector } from 'react-redux'\r\nimport { canvasReinit } from '../../services/appProcessor';\r\nimport Actions from '../../store/actions/actions';\r\n\r\nimport './fullScreen.scss';\r\n\r\nconst FullScreen = () => {\r\n    const { fullScreenMode } = Actions();\r\n    const {channels} = useSelector(state => state) \r\n    const visLab = useSelector(state => state.visLab)\r\n    const visBor = useSelector(state => state.visBor)\r\n\r\n    const elements = channels.map((item, i) => {\r\n        const viewId = `view${i}`\r\n        return (\r\n            <div key={i} className='fullscreen__item'>\r\n                {visLab ? <div className='app__navtext'>Ch: {item.mark}</div> : null}\r\n                <div className={visBor ? 'app__bkg fullscreen__view' : 'fullscreen__view'} id={viewId}></div>\r\n            </div>    \r\n        )\r\n    });\r\n\r\n    const changefullScreenMode = () => {\r\n        fullScreenMode(0)\r\n        canvasReinit()\r\n    }\r\n\r\n    return (\r\n        <div className='fullscreen'>\r\n            <button \r\n                className='fullscreen__button' \r\n                onClick={() => changefullScreenMode()}>\r\n                GO BACK TO SETTINGS</button>\r\n                <div className='app__flex__center'>\r\n                    {elements}\r\n                </div>                \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FullScreen;","import FullScreen from \"../appFullScreen/FullScreen\";\r\n\r\nconst FSPage = () => {\r\n    return (\r\n        <>\r\n            <FullScreen/>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default FSPage;","import { useDispatch, useSelector } from \"react-redux\";\r\nimport { initMarkers } from '../../services/appDisplayDrawingProcessor';\r\nimport { initState } from \"../../services/appProcessor\";\r\n\r\nconst Actions = () => {\r\n    const dispatch = useDispatch();\r\n    const channels = useSelector(state => state.channels)\r\n\r\n    const changeFillStatus = (e) => {\r\n        dispatch({type: 'CHANGE_FILL_STATUS', fill: e.value});\r\n    }\r\n\r\n    const calibreMinMax = (e, i) => {\r\n        dispatch({type: 'CHANGE_MAX_CHANNEL', max: e.value, id: i})\r\n        dispatch({type: 'CHANGE_MIN_CHANNEL', min: e.value, id: i})\r\n    }\r\n\r\n    const changeMaxChannel = (e, i) => {\r\n        dispatch({type: 'CHANGE_MAX_CHANNEL', max: e.value, id: i})\r\n        if(e.value < channels[i].min){\r\n            calibreMinMax(e, i);\r\n        } else {\r\n            dispatch({type: 'CHANGE_MAX_CHANNEL', max: e.value, id: i})\r\n        }  \r\n        initMarkers(); \r\n    }\r\n\r\n    const changeMinChannel = (e, i) => {        \r\n        if(e.value > channels[i].max){\r\n            calibreMinMax(e, i);\r\n        } else {\r\n            dispatch({type: 'CHANGE_MIN_CHANNEL', min: e.value, id: i})\r\n        } \r\n        initMarkers();\r\n    }\r\n\r\n    const changeVisMode = (e) => {\r\n        dispatch({type: 'CHANGE_VISMODE', rate: e.value})\r\n    }\r\n\r\n    const changeColor = (e) => {\r\n        dispatch({type: 'CHANGE_COLOR', color: e.value})\r\n    }\r\n\r\n    const changePeaksStatus = (e) => {\r\n        dispatch({type: 'CHANGE_PEAKS_STATUS', peaks: e.value})\r\n    }\r\n\r\n    const addNewChannel = (eArr) => {\r\n        dispatch({type: 'ADD_NEW_CHANNEL', newArr: eArr})\r\n    }\r\n\r\n    const changeSampleColor = (e) => {\r\n        dispatch({type: 'CHANGE_SAMPLE_COLOR', color: e.value, id: e.id})\r\n        initMarkers();\r\n    }\r\n\r\n    const assembleChange = (e) => {\r\n        dispatch({type: 'CHANGE_SAMPLE_ASSEMBLE', assemble: e.value, id: e.id})\r\n        \r\n    }\r\n\r\n    const rearChange = (e) => {\r\n        dispatch({type: 'CHANGE_REARBUFFER', rear: e.value, id: e.id})\r\n    }\r\n\r\n    const frontChange = (e) => {\r\n        dispatch({type: 'CHANGE_FRONTBUFFER', front: e.value, id: e.id})\r\n    }\r\n\r\n    const reactionChange = (e) => {\r\n        dispatch({type: 'CHANGE_REACTION', reaction: e.value, id: e.id})\r\n    }\r\n\r\n    const deleteChannel = (e) => {\r\n        dispatch({type: 'DELETE_SELECTED_CHANNEL', id: e.id})\r\n        initMarkers();\r\n    }\r\n\r\n    const changeLightUp = (e) => {\r\n        dispatch({type: 'CHANGE_LIGHT_UP', value: e.value})\r\n        initState();\r\n    }\r\n\r\n    const changeLightDown = (e) => {\r\n        dispatch({type: 'CHANGE_LIGHT_DOWN', value: e.value})\r\n        initState();\r\n    }\r\n\r\n    const changeLightMax = (e) => {\r\n        dispatch({type: 'CHANGE_LIGHT_MAX', value: e.value})\r\n        initState();\r\n    }\r\n\r\n    const changeVis = (e) => {\r\n        dispatch({type: 'CHANGE_VISUAL_SETTINGS', value: e.value})\r\n        initState();\r\n    }\r\n\r\n    const visBorChange = (e) => {\r\n        dispatch({type: 'CHANGE_BORDER_STATUS', value: e.checked})\r\n    }\r\n\r\n    const visLabChange = (e) => {        \r\n        dispatch({type: 'CHANGE_LABELS_STATUS', value: e.checked})\r\n    }\r\n\r\n    const fullScreenMode = (value) => {\r\n        dispatch({type: 'CHANGE_FULLSCREEN_MODE', value: value})\r\n    }\r\n\r\n    const onChangeRate = (e) => {\r\n        changeVisMode(e)\r\n        channels.forEach((item, i) => {\r\n            if(item.max > +e.value) {\r\n                changeMaxChannel(e, i)\r\n            }\r\n            if(item.min > +e.value) {\r\n                changeMinChannel(e, i)\r\n            }\r\n        });\r\n    }\r\n\r\n    //localstorage\r\n    localStorage.setItem('channels', JSON.stringify(channels))\r\n\r\n    return {changeFillStatus, \r\n            onChangeRate, \r\n            changeColor, \r\n            changePeaksStatus, \r\n            addNewChannel, \r\n            changeSampleColor,\r\n            assembleChange,\r\n            rearChange,\r\n            frontChange,\r\n            reactionChange,\r\n            deleteChannel,\r\n            changeMinChannel,\r\n            changeMaxChannel,\r\n            changeLightUp,\r\n            changeLightDown,\r\n            changeVis,\r\n            visBorChange,\r\n            visLabChange,\r\n            changeLightMax,\r\n            fullScreenMode}\r\n}\r\n\r\nexport default Actions;"],"names":["fullScreenMode","Actions","channels","useSelector","state","visLab","visBor","elements","map","item","i","viewId","className","mark","id","onClick","canvasReinit","dispatch","useDispatch","calibreMinMax","e","type","max","value","min","changeMaxChannel","initMarkers","changeMinChannel","localStorage","setItem","JSON","stringify","changeFillStatus","fill","onChangeRate","rate","changeVisMode","forEach","changeColor","color","changePeaksStatus","peaks","addNewChannel","eArr","newArr","changeSampleColor","assembleChange","assemble","rearChange","rear","frontChange","front","reactionChange","reaction","deleteChannel","changeLightUp","initState","changeLightDown","changeVis","visBorChange","checked","visLabChange","changeLightMax"],"sourceRoot":""}