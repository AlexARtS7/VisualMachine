{"version":3,"file":"static/js/566.7d4da491.chunk.js","mappings":"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","sources":["components/appFullScreen/FullScreen.js","components/pages/FSPage.js","store/actions/actions.js"],"sourcesContent":["import { useSelector } from 'react-redux'\r\nimport { canvasReinit } from '../../services/appProcessor';\r\nimport Actions from '../../store/actions/actions';\r\n\r\nimport './fullScreen.scss';\r\n\r\nconst FullScreen = () => {\r\n    const { fullScreenMode } = Actions();\r\n    const {channels} = useSelector(state => state) \r\n    const visLab = useSelector(state => state.visLab)\r\n    const visBor = useSelector(state => state.visBor)\r\n    const hrefInit = useSelector(state => state.hrefInit)\r\n    const initHref = useSelector(state => state.initHref)\r\n\r\n    const elements = channels.map((item, i) => {\r\n        if(hrefInit === !initHref) return null;\r\n        const viewId = `view${i}`\r\n        return (\r\n            <div key={i} className='fullscreen__item'>\r\n                {visLab ? <div className='app__navtext'>Ch: {item.mark}</div> : null}\r\n                <div className={visBor ? 'app__bkg fullscreen__view' : 'fullscreen__view'} id={viewId}></div>\r\n            </div>    \r\n        )\r\n    });\r\n\r\n    const changefullScreenMode = () => {\r\n        fullScreenMode(0)\r\n        canvasReinit()\r\n    }\r\n\r\n    return (\r\n        <div className='fullscreen'>\r\n            <button \r\n                className='fullscreen__button' \r\n                onClick={() => changefullScreenMode()}>\r\n                GO BACK TO SETTINGS</button>\r\n                <div className='app__flex__center'>\r\n                    {elements}\r\n                </div>                \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FullScreen;","import FullScreen from \"../appFullScreen/FullScreen\";\r\n\r\nconst FSPage = () => {\r\n    return (\r\n        <>\r\n            <FullScreen/>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default FSPage;","import { useDispatch, useSelector } from \"react-redux\";\r\nimport { useEffect } from \"react\";\r\nimport { initMarkers } from '../../services/appDisplayDrawingProcessor';\r\nimport { initState } from \"../../services/appProcessor\";\r\nimport { hrefInition } from \"../../services/appDisplayDrawingProcessor\";\r\n\r\nconst Actions = () => {\r\n    const dispatch = useDispatch();\r\n    const channels = useSelector(state => state.channels)\r\n    const fullScreen = useSelector(state => state.fullScreen)\r\n\r\n    const changeFillStatus = (e) => {        \r\n        localStorage.setItem('fillStatus', e.value)\r\n        dispatch({type: 'CHANGE_FILL_STATUS', fill: e.value});\r\n    }\r\n\r\n    const changeMaxChannel = (e, i) => {\r\n        const tempArr = channels;\r\n        tempArr[i].max = +e.value\r\n\r\n        dispatch({type: 'CHANGE_CHANNEL_ARRAY', tempArr: tempArr })\r\n\r\n        if(e.value < channels[i].min){\r\n            changeMinChannel(e, i);\r\n        }\r\n        initMarkers(); \r\n    }\r\n\r\n    const changeMinChannel = (e, i) => {         \r\n        const tempArr = channels;\r\n        tempArr[i].min = +e.value\r\n\r\n        dispatch({type: 'CHANGE_CHANNEL_ARRAY', tempArr: tempArr })\r\n\r\n        if(e.value > channels[i].max){\r\n            changeMaxChannel(e, i);\r\n        }\r\n        initMarkers();\r\n    }\r\n\r\n    const changeVisMode = (e) => {        \r\n        localStorage.setItem('rate', e.value)\r\n        dispatch({type: 'CHANGE_VISMODE', rate: e.value})\r\n    }\r\n\r\n    const changeColor = (e) => {        \r\n        localStorage.setItem('renderColor', e.value)\r\n        dispatch({type: 'CHANGE_COLOR', color: e.value})\r\n    }\r\n\r\n    const changePeaksStatus = (e) => {        \r\n        localStorage.setItem('peaksStatus', e.value)\r\n        dispatch({type: 'CHANGE_PEAKS_STATUS', peaks: e.value})\r\n    }\r\n\r\n    const changeSampleColor = (e, i) => {\r\n        const tempArr = channels;\r\n        tempArr[i].color = e.value\r\n\r\n        dispatch({type: 'CHANGE_CHANNEL_ARRAY', tempArr: tempArr })\r\n        initMarkers();\r\n    }\r\n\r\n    const assembleChange = (e, i) => {\r\n        const tempArr = channels;\r\n        tempArr[i].assemble = e.value\r\n\r\n        dispatch({type: 'CHANGE_CHANNEL_ARRAY', tempArr: tempArr })        \r\n    }\r\n\r\n    const rearChange = (e, i) => {\r\n        const tempArr = channels;\r\n        tempArr[i].rear = +e.value\r\n\r\n        dispatch({type: 'CHANGE_CHANNEL_ARRAY', tempArr: tempArr })\r\n    }\r\n\r\n    const frontChange = (e, i) => {\r\n        const tempArr = channels;\r\n        tempArr[i].front = +e.value\r\n\r\n        dispatch({type: 'CHANGE_CHANNEL_ARRAY', tempArr: tempArr })\r\n    }\r\n\r\n    const reactionChange = (e, i) => {\r\n        const tempArr = channels;\r\n        tempArr[i].reaction = +e.value\r\n\r\n        dispatch({type: 'CHANGE_CHANNEL_ARRAY', tempArr: tempArr })\r\n    }\r\n\r\n    const changeLightUp = (e) => {        \r\n        localStorage.setItem('opacityUp', e.value/1000)\r\n        dispatch({type: 'CHANGE_LIGHT_UP', value: e.value})\r\n        initState();\r\n    }\r\n\r\n    const changeLightDown = (e) => {        \r\n        localStorage.setItem('opacityDown', e.value/1000)\r\n        dispatch({type: 'CHANGE_LIGHT_DOWN', value: e.value})\r\n        initState();\r\n    }\r\n\r\n    const changeLightMax = (e) => {        \r\n        localStorage.setItem('opacityMax', e.value/100)\r\n        dispatch({type: 'CHANGE_LIGHT_MAX', value: e.value})\r\n        initState();\r\n    }\r\n\r\n    const changeVis = (e) => {        \r\n        localStorage.setItem('visSet', e.value)\r\n        dispatch({type: 'CHANGE_VISUAL_SETTINGS', value: e.value})\r\n        initState();\r\n    }\r\n\r\n    const visBorChange = (e) => {        \r\n        localStorage.setItem('visBor', e.checked)\r\n        dispatch({type: 'CHANGE_BORDER_STATUS', value: e.checked})\r\n    }\r\n\r\n    const visLabChange = (e) => {   \r\n        localStorage.setItem('visLab', e.checked)     \r\n        dispatch({type: 'CHANGE_LABELS_STATUS', value: e.checked})\r\n    }\r\n\r\n    const fullScreenMode = (value) => {\r\n        dispatch({type: 'CHANGE_FULLSCREEN_MODE', value: value})\r\n    }\r\n\r\n    const onChangeRate = (e) => {\r\n        changeVisMode(e)\r\n        channels.forEach((item, i) => {\r\n            if(item.max > +e.value) {\r\n                changeMaxChannel(e, i)\r\n            }\r\n            if(item.min > +e.value) {\r\n                changeMinChannel(e, i)\r\n            }\r\n        });\r\n    }\r\n\r\n    const addChannels = () => {\r\n        const abc = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.split('');\r\n        let res = abc.find(i => !channels.map(item => item.mark).includes(i))\r\n        if(channels.length < 10){\r\n            const tempArr = channels;\r\n            tempArr.push (\r\n                {mark: res, min: 0, max: 0, \r\n                color: '0,255,0', \r\n                assemble: 'maximum', rear: 28, \r\n                front: 10, reaction: 2})\r\n         \r\n        tempArr.sort((a, b) => {\r\n            if(a.mark < b.mark) return -1;\r\n            if(a.mark > b.mark) return 1;\r\n            })\r\n\r\n            dispatch({type: 'CHANGE_CHANNEL_ARRAY', tempArr: tempArr })\r\n            initMarkers();\r\n        }\r\n    }\r\n    \r\n    const deleteChannel = (i) => {\r\n        const tempArr = channels;\r\n        tempArr.splice(i, 1);   \r\n\r\n        dispatch({type: 'CHANGE_CHANNEL_ARRAY', tempArr: tempArr })\r\n        initMarkers();\r\n    }\r\n\r\n    useEffect(() => {\r\n        dispatch({type: 'CHANGE_HREFINIT', hrefInit: hrefInition(), initHref: window.location.href })\r\n    }, [fullScreen])\r\n    \r\n    //localstorage\r\n    localStorage.setItem('channels', JSON.stringify(channels))\r\n\r\n    return {changeFillStatus, \r\n            addChannels,\r\n            onChangeRate, \r\n            changeColor, \r\n            changePeaksStatus, \r\n            changeSampleColor,\r\n            assembleChange,\r\n            rearChange,\r\n            frontChange,\r\n            reactionChange,\r\n            deleteChannel,\r\n            changeMinChannel,\r\n            changeMaxChannel,\r\n            changeLightUp,\r\n            changeLightDown,\r\n            changeVis,\r\n            visBorChange,\r\n            visLabChange,\r\n            changeLightMax,\r\n            fullScreenMode}\r\n}\r\n\r\nexport default Actions;"],"names":["fullScreenMode","Actions","channels","useSelector","state","visLab","visBor","hrefInit","initHref","elements","map","item","i","viewId","className","mark","id","onClick","canvasReinit","dispatch","useDispatch","fullScreen","changeMaxChannel","e","tempArr","max","value","type","min","changeMinChannel","initMarkers","useEffect","hrefInition","window","location","href","localStorage","setItem","JSON","stringify","changeFillStatus","fill","addChannels","res","split","find","includes","length","push","color","assemble","rear","front","reaction","sort","a","b","onChangeRate","rate","changeVisMode","forEach","changeColor","changePeaksStatus","peaks","changeSampleColor","assembleChange","rearChange","frontChange","reactionChange","deleteChannel","splice","changeLightUp","initState","changeLightDown","changeVis","visBorChange","checked","visLabChange","changeLightMax"],"sourceRoot":""}